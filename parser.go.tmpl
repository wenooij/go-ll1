// Code generated by go-ll1, DO NOT EDIT.

{{$start := .Start}}
{{$type := .TypePrefix}}

{{range .GoBuildTags}}
//go:build {{.}}
{{end}}

package {{.PackageName}}

import (
	"fmt"
	"os"
  {{range .ExtraImports}}
  {{printf "%q" .}}
  {{end}}
)

type {{$type}} int

const (
	{{$type}}Invalid = iota
  {{$type}}EOS // End Of Stack
  
  // Terminals.
  {{- range .Terminals}}
  {{printf "%s%s // %s" $type .Name (print .)}}
  {{- end}}
	
  // Nonterminals.
  {{- range .NonterminalNames}}
  {{printf "%s%s" $type .}}
  {{- end}}
)

func lex(input string) (tok {{$type}}, size int) {
	if len(input) == 0 {
		return {{$type}}EOS, 0 // End of Stack.
	}
	{{- if .LexCases}}
	{{.LexStmts "input"}}
	switch {
  {{- range .LexCases}}
  case {{.Cond}}:
  	return {{$type}}{{.Key}}, {{.Size}}
  {{- end}}
	}
	{{- end}}
	return {{$type}}Invalid, 0 // Invalid.
}

func main() {
	if len(os.Args) < 2 {
		fmt.Fprintln(os.Stderr, "usage:\n\tll [input]")
		return
	}

	// LL parser table.
	table := make(map[{{$type}}]map[{{$type}}]int, {{len .Table}}) 
	ss := make([]{{$type}}, 0, 256) // Symbol stack.  (TODO: Find a good initial size based on (input, G).)
	input := os.Args[1] // Input string.

	// Initialize the stack.
	ss = append(ss,
		{{$type}}EOS, // End Of Stack.
	  {{$type}}{{$start}},  // Start.
	)

	// Initialize parsing table.
  {{- range .Table}}
  table[{{$type}}{{.Key}}] = map[{{$type}}]int{
    {{- range .Cols}}
    {{$type}}{{.Key}}: {{.Value}},
    {{- end}}
  }
  {{- end}}

	for len(ss) > 0 {
		top := ss[len(ss)-1]
		s, size := lex(input)
		if s == top {
			fmt.Printf("Matched symbols: %v\n", s)
			input = input[size:]
			ss = ss[:len(ss)-1] // Pop.
			continue
		}

		fmt.Printf("Rule: %v\n", table[top][s])
		switch table[top][s] {
    {{- range .Nonterminals}}
		case {{.Index}}: // {{print .}}
      ss = append(ss[:len(ss)-1],
			{{- $n := .}}
      {{- range $index, $_ := .Rhs}}
      {{$type}}{{$n.ReverseAt ($index)}},
      {{- end}}
      )
    {{end}}

		default:
			fmt.Fprintln(os.Stderr, "parsing table defaulted")
			return
		}
	}

	fmt.Println("finished parsing")
}
